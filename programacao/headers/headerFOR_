:insert
!=======================================================================
      PROGRAM XXXXXXX
!---------------------------------------------------------------------
! Descricao:
!  OBS.: flags para compilacao RSF:
!        -I$RSFROOT/include -L$RSFROOT/lib -lrsff90 -lrsf -lm [-lfftw3f]
!---------------------------------------------------------------------
!         *** Criado por: .............. XXXNAMEXXX
!         *** Criado em: ..................... XX.XX.XXXX
!         *** Ultima modificacao: .... XX:XX - XX.XX.XXXX
!         *** Modificado por: ........ XXXXXXXXXXXX 
!=======================================================================
      USE rsf
      IMPLICIT NONE

      type (file)                     :: sfin
      type (file)                     :: sfout
      integer                         :: i1
      integer                         :: i2
      integer                         :: n1
      integer                         :: n2
      real                            :: clip
      real, dimension(:), allocatable :: trace

#ifdef DEBUG
      write(0,*)'  ** XXXINITXXX>> Testando versao DUBUG RSF para CLIP de tracos :: -cpp -ffree-form -DDEBUG'
#else
      write(0,*)'  ** XXXINITXXX>> Testando versao NORMAL RSF para CLIP de tracos :: -cpp -ffree-form'
#endif
      write(0,*)'  ** XXXINITXXX>> ============================================'
      flush(0)

      ! initialize RSF
      !-------------------------
      call sf_init()
      sfin  = rsf_input()
      sfout = rsf_output() 
      if (sf_float /= gettype(sfin)) call sf_error("Need float type")
      !-------------------------
 
      call from_par(sfin, "n1", n1)
      n2 = filesize(sfin, 1)
 
      call from_par("clip", clip) ! command-line parameter
      allocate (trace (n1))
 
      do i2=1, n2
         call rsf_read(sfin, trace)
         where (trace >  clip) trace =  clip
         where (trace < -clip) trace = -clip
         call rsf_write(sfout,trace)
      end do
 
      deallocate (trace)

      END PROGRAM XXXXXXX
!=======================================================================

.
