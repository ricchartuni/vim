:insert
//#define _USE_MPIONLY__
#ifdef _USE_MPIONLY__
#ifdef _USAR_MPI___
#define _BUILD_MYBINARY___
#define _USAR_MAINMPI___
#endif
#else
#define _BUILD_MYBINARY___
#endif
//---------------------------
#ifdef _BUILD_MYBINARY___
//---------------------------
#define __XXXXXXX_C__
#include "XXXXXXX.h"
//---------------------------
#include <assert.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
//---------------------------
#ifdef _USAR_MPI___
#ifndef _USAR_MAINMPI___
//#define _USAR_MAINMPI___
#endif
#endif
//---------------------------
#include "mydbg.h"
#ifdef _DEBUG___
//#define _LOCALDEBUG___
#endif
//---------------------------
#include "constantes.h"
#include "myrsf.h"
#include "rsfinp.h"
#include "rsfutl.h"
#include "alocacao.h"
#include "mpiutl.h"
#include "defclock.h"
#include "mylog.h"
//---------------------------
#define __MYRSFCMDOPC__
#ifdef __MYRSFCMDOPC__
#define myrsfinit(AC,AV) rsfopcinit(AC,AV)
#else
#define myrsfinit(AC,AV) rsfinit(AC,AV)
#endif
//---------------------------
#define PROG_INIT "Initialize program"
#define PROGALLOC "Program allocation"
#define PROC_INFO "Proccessing"
#define PROC__MPI "MPI-trace proccessing"
#define PROG_KILL "Finalize program"
//---------------------------
#define INPUT__PARM    "inp"
#define OUTPUT_PARM    "out"
#define CLIP___PARM   "clip"
//---------------------------
#define CERR_NOTDEFINED   "Error not defined .........."
//---------------------------
#define IERR_SEIS__INPUT  51
#define IERR_SEIS_OUTPUT  52
#define IERR_INPUT__TYPE  53
#define IERR_INPUT____N1  54
#define IERR_INPUT__CLIP  55
#define IERR_SEIS__ALLOC  56
#define IERR_SAUX__ALLOC  57
//---------------------------
#define CERR_SEIS__INPUT  "Missed seismic input file (" INPUT__PARM "=...)"
#define CERR_SEIS_OUTPUT  "Missed seismic output file (" OUTPUT_PARM "=...)"
#define CERR_INPUT__TYPE  "Need float input file ....."
#define CERR_INPUT____N1  "Input file must have n1 information ....."
#define CERR_INPUT__CLIP  "Must define clip (" CLIP___PARM "=...)"
#define CERR_SEIS__ALLOC  "Could not allocate seis ....."
#define CERR_SAUX__ALLOC  "Could not allocate saux ....."
//---------------------------
static int         n1;
static int         n2;
static int         n3;
static int         n4;
static float       o1;
static float       o2;
static float       o3;
static float       o4;
static float       d1;
static float       d2;
static float       d3;
static float       d4;
static size_t   nstot;
static size_t   n2tot;
static float     clip;
static float   **seis;
static float   **saux;
static sf_file  sfinp;
static sf_file  sfout;
static FILE    * flog;
//---------------------------

//======================================================================
   static void main_proc(){
//---------------------------------------------------------------------
      // -----------------------
      // CLOCK proccess ........
      defclock_proc();
      // -----------------------
#ifdef _USAR_MAINMPI___
      char* cjob = PROC__MPI;
      int   njob = n2tot;
      if(ismanager())
         mpisendalltasks(njob, cjob, flog);
      else{
         mpitask_str task;
         int irecv = mpiworker_taskbeg(&task, njob, cjob, flog);
#else
         int irecv = n2tot-1;
#endif
         while(irecv >= 0){
            for (int i1=0; i1<n1; i1++){
               if     (saux[irecv][i1]> clip) saux[irecv][i1]= clip;
               else if(saux[irecv][i1]<-clip) saux[irecv][i1]=-clip;
            }
#ifdef _USAR_MAINMPI___
            irecv = mpireceivetask(task);
#else
            irecv--;
#endif
    }
#ifdef _USAR_MAINMPI___
         mympi_worker_sumf(nstot, saux[0], seis[0]);
      }
#endif
   }
//======================================================================
//======================================================================
   static void main_write(){
//---------------------------------------------------------------------
#ifdef _USAR_MAINMPI___
      if(am_i_rank(1)){
#endif
         // -----------------------
         // CLOCK write ...........
         defclockwrite();
         // -----------------------
         sf_floatwrite(seis[0],nstot,sfout);
#ifdef _USAR_MAINMPI___
      }
#endif
   }
//======================================================================
//======================================================================
   static void main_read(){
//---------------------------------------------------------------------
      // -----------------------
      // CLOCK read ............
      defclock_read();
      // -----------------------
      sf_floatread(seis[0],nstot,sfinp);
   }
//======================================================================
//======================================================================
   static void main_free(){
//---------------------------------------------------------------------
#ifdef _USAR_MAINMPI___
      if(saux) UTL_Free2(saux);
#endif
      if(seis) UTL_Free2(seis);
   }
//======================================================================
//======================================================================
   static void main_null(){
//---------------------------------------------------------------------
      seis  = NULL;
      saux  = NULL;
      sfinp = NULL;
      sfout = NULL;
   }
//======================================================================
//======================================================================
   static void main_alloc(){
//---------------------------------------------------------------------
      // -----------------------
      // CLOCK alloc ...........
      defclockalloc();
      // -----------------------
      seis = UTL_Malloc2F(n2tot,n1);
      main_err(!seis, IERR_SEIS__ALLOC);
#ifdef _USAR_MAINMPI___
      saux = UTL_Malloc2F(n2tot,n1);
      main_err(!saux, IERR_SAUX__ALLOC);
#else
      saux = seis;
#endif
   }
//======================================================================
//======================================================================
   static void main_output(){
//---------------------------------------------------------------------
      main_err(!rsfparcheckall(OUTPUT_PARM), IERR_SEIS_OUTPUT);
#ifdef _USAR_MAINMPI___
      if(am_i_rank(1)){
#endif
         sfout = sf_output(OUTPUT_PARM);
         sf_fileflush(sfout, sfinp);
#ifdef _USAR_MAINMPI___
      }
#endif
   }
//======================================================================
//======================================================================
   static void main_input(){
//---------------------------------------------------------------------
      main_err(!rsfparcheckall(INPUT__PARM)   , IERR_SEIS__INPUT);
      sfinp = sf_input(INPUT__PARM);
      main_err(SF_FLOAT!=sf_gettype(sfinp)    , IERR_INPUT__TYPE);
      main_err(!sf_histint(sfinp,"n1",&n1)    , IERR_INPUT____N1);
      main_err(!sf_getfloat(CLIP___PARM,&clip), IERR_INPUT__CLIP);

      rsfxDinfo(rsffloat, sfinp, &n1,&o1,&d1,
       &n2,&o2,&d2, &n3,&o3,&d3, &n4,&o4,&d4);

      n2tot = n2*n3*n4;
      nstot = n1*n2tot;
   }
//======================================================================
//======================================================================
   static char *main_errtype(const int itype, char *cerr){
//---------------------------------------------------------------------
      switch(itype){
         case IERR_SEIS__INPUT:
            strcpy(cerr, CERR_SEIS__INPUT);
            break;
         case IERR_SEIS_OUTPUT:
            strcpy(cerr, CERR_SEIS_OUTPUT);
            break;
         case IERR_INPUT__TYPE:
            strcpy(cerr, CERR_INPUT__TYPE);
            break;
         case IERR_INPUT____N1:
            strcpy(cerr, CERR_INPUT____N1);
            break;
         case IERR_INPUT__CLIP:
            strcpy(cerr, CERR_INPUT__CLIP);
            break;
         case IERR_SEIS__ALLOC:
            strcpy(cerr, CERR_SEIS__ALLOC);
            break;
         case IERR_SAUX__ALLOC:
            strcpy(cerr, CERR_SAUX__ALLOC);
            break;
         default:
            strcpy(cerr, CERR_NOTDEFINED);
            break;
      }
      return cerr;
   }
//======================================================================
//======================================================================
   int main(int argc, char *argv[]){
//---------------------------------------------------------------------
//  ..................................................... Main program
//  Do not need to change from here ..................................
//---------------------------------------------------------------------
//        *** Created by: .............. XXXNAMEXXX
//        *** Created on: .................... XX.XX.XXXX
//        *** Last modification: ..... XX:XX - XX.XX.XXXX
//        *** Modified by: ...........
//======================================================================
#define main_kill() main_kill0(0, NULL)
      // -----------------------
      // Initialize ............
      // -----------------------
      main_init(argc, argv);
      // -----------------------
      // Input parameters ......
      // -----------------------
      main_input();
      // -----------------------
      // Output parameters .....
      // -----------------------
      main_output();
#ifdef _USAR_MAINMPI___
      if(isworker()){
#endif
         // -----------------------
         MYLOG_HDR("%s\n",PROGALLOC);
         // -----------------------
         // Allocation ............
         // -----------------------
         main_alloc();
         // -----------------------
         // Read ..................
         // -----------------------
         main_read();
#ifdef _USAR_MAINMPI___
      }
#endif
      // -----------------------
      MYLOG_HDR("%s\n",PROC_INFO);
      // -----------------------
      // Proccess ..............
      // -----------------------
      main_proc();
      // -----------------------
      // Write .................
      // -----------------------
      main_write();
      // -----------------------
      // Finish program ........
      // -----------------------
      main_kill();
   }
//======================================================================
//======================================================================
   static void main_kill0(const int iend, char *cerr){
//---------------------------------------------------------------------
      // -----------------------
      MYLOG_HDR("%s\n",PROG_KILL);
      // -----------------------
      // CLOCK free ............
      defclock_free();
      // -----------------------
      // -----------------------
      // Free memory ...........
      // -----------------------
      main_free();
      // -----------------------
      // Finalize RSF ..........
      // -----------------------
      sf_close();
      // -----------------------
      // Finalize CLOCK ........
      // -----------------------
      if (iend == 0)
         defclock_kill(flog);
      // -----------------------
      // Finalize LOGFILE ......
      // -----------------------
      MYLOG_KILL(iend,cerr);
#ifdef _USAR_MAINMPI___
      // -----------------------
      // Finalize MPI ..........
      // -----------------------
      mympi_finalize();
#endif
      // -----------------------
      // Finalize Program ......
      // -----------------------
      exit(iend);
   }
//======================================================================
//======================================================================
   static void main_init(int argc, char *argv[]){
//---------------------------------------------------------------------
      // -----------------------
      // Initialize CLOCK ......
      // -----------------------
      defclock_init();
#ifdef _USAR_MAINMPI___
      // -----------------------
      // Initialize MPI ........
      // -----------------------
      mympi_init(argc,argv);
#endif
      // -----------------------
      // Initialize RSF ........
      // -----------------------
      myrsfinit(argc,argv);
      // -----------------------
      // Initialize LOGFILE ....
      // -----------------------
      flog = MYLOG_INIT(argv, sf_getstring("log"));
      // -----------------------
      MYLOG_HDR("%s\n",PROG_INIT);
      // -----------------------
      // NULL structures .......
      // -----------------------
      main_null();
   }
//======================================================================
//======================================================================
   static void main_err(const int iret, const int itype){
//---------------------------------------------------------------------
      if(iret == 0) return;
      // ------------------------
      // Found error ......
      // ------------------------
      char cerr[1024];
      main_errtype(itype, cerr);
      strcat(cerr, "\n");
      main_kill0(itype, cerr);
   }
//======================================================================
#else
#include "no_mpi.h"
#endif
.
