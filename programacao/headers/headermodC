:insert
#define __XXXXXXX_C__
#include "XXXXXXX.h"
//---------------------------
#include "mydbg.h"
#ifdef _DEBUG___
//#define _LOCALDEBUG___
#endif
//---------------------------
#include "constantes.h"
#include "alocacao.h"
#include "mymemcpy.h"
#include "mylog.h"
#ifdef _USAR_MPI___
#include "mpiutl.h" 
#endif
//---------------------------
#define CERR_NOTDEFINED "Error not defined .........."
//---------------------------
#define IERR_ALLOC_VEC  51
//---------------------------
#define CERR_ALLOC_VEC  "Could not allocate vec ....."
//---------------------------

//======================================================================
   int XXXXXXX_exec(XXXXXXX_str *st){
//---------------------------------------------------------------------
// Functions to design XXXXXXX
//---------------------------------------------------------------------
//        *** Created by: .............. XXXNAMEXXX
//        *** Created on: .................... XX.XX.XXXX
//        *** Last modification: ..... XX:XX - XX.XX.XXXX
//        *** Modified by: ...........
//---------------------------------------------------------------------
      int iret = 0;
      // ------------------------
      // ------------------------
      return iret;
   }
//======================================================================
//======================================================================
   int XXXXXXX_preexec(XXXXXXX_str *st){
//---------------------------------------------------------------------
      int iret = 0;
      // ------------------------
      // Define structure scalars
      // ------------------------
      zeroF(st->vec, st->n1);
      
      return iret;
   }
//======================================================================
//======================================================================
   int XXXXXXX_init(XXXXXXX_str *st){
//---------------------------------------------------------------------
      int iret = 0;
      mylocal_null(st);
      // ------------------------
      // Define structure scalars
      // ------------------------
      st->n1 = 2;

      return iret;
   }
//======================================================================
//======================================================================
   int XXXXXXX_alloc(XXXXXXX_str *st){
//---------------------------------------------------------------------
      int iret = 0;
#ifdef _USAR_MPI___
      if(isworker()){
#endif
         // ------------------------
         // Allocate structure vectors
         // ------------------------
         st->vec = UTL_Malloc1F(st->n1);
         iret += mylocal_err(st, !(st->vec), IERR_ALLOC_VEC);
#ifdef _USAR_MPI___
      }
#endif
      return iret;
   }
//======================================================================
//======================================================================
   void XXXXXXX_free(XXXXXXX_str *st){
//---------------------------------------------------------------------
#ifdef _USAR_MPI___
      if(isworker()){
#endif
         // ------------------------
         // Free structure
         // ------------------------
         if(st->vec) UTL_Free1(st->vec);
#ifdef _USAR_MPI___
      }
#endif

      // ------------------------
      // NULL structure
      // ------------------------
      mylocal_null(st);
   }
//======================================================================
//======================================================================
   static void mylocal_null(XXXXXXX_str *st){
//---------------------------------------------------------------------
      st->n1  = myinulo;
      st->vec =    NULL;
   }
//======================================================================
//======================================================================
   static char *mylocal_errtype(const int itype, char *cerr){
//---------------------------------------------------------------------
      switch(itype){
         case IERR_ALLOC_VEC:
            strcpy(cerr, CERR_ALLOC_VEC);
            break;
         default:
            strcpy(cerr, CERR_NOTDEFINED);
            break;
      }
      return cerr;
   }
//======================================================================
//======================================================================
   XXXXXXX_str XXXXXXX_null(){
//---------------------------------------------------------------------
//  Do not need to change ............................................
      XXXXXXX_str st;
      mylocal_null(&st);
      return st;
   }
//======================================================================
//======================================================================
   static int mylocal_err(XXXXXXX_str *st, const int iret, const int itype){
//---------------------------------------------------------------------
//  Do not need to change ............................................
      if(iret == 0) return 0;
      // ------------------------
      // Found error ......
      // ------------------------
      char cerr[1024];
      mylocal_errtype(itype, cerr);
      MYLOG_ERR(itype, "%s\n", cerr);
      XXXXXXX_free(st);
      return 1;
   }
//======================================================================
.
