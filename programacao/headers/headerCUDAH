:insert
#ifndef __XXXXXXX_CUH__
#define __XXXXXXX_CUH__

#include <cstdlib>
#include <cassert>
#include <iostream>

#define  ERR_CUDA  -999
#define  CUDA_ASYNC(call) do{\
   cudaError_t err=call;\
   if (err != cudaSuccess){\
      fprintf(stderr,"CudaERR: %s(%i)\n  *%s %s\n",\
       __FILE__, __LINE__, cudaGetErrorString(err), #call);\
      cudaDeviceReset();\
      assert(0);\
      return ERR_CUDA;\
   }\
}while(0)
#define  CUDA_CALL(call) do {\
   CUDA_ASYNC(cudaDeviceSynchronize());\
   CUDA_ASYNC(call);\
}while(0)

//=========================================
#define  _nbx     (gridDim.x)
#define  _ibx     (blockIdx.x)
#define  _ntx     (blockDim.x)
#define  _itx     (threadIdx.x)
//---------------------------------------
#define  _nby     (gridDim.y)
#define  _iby     (blockIdx.y)
#define  _nty     (blockDim.y)
#define  _ity     (threadIdx.y)
//---------------------------------------
#define  _indx    ((ibx)*(ntx)+(itx))
#define  _indy    ((iby)*(nty)+(ity))
#define  _tid     ((ntx)*(ity)+(itx))
// __ind__ valido apenas para multiplo --
// do WARPSIZE --------------------------
#define  __ind__ ((nbx*indy+ibx)*ntx+itx)
//=========================================
//#define  sh_inp2d(ioffy,ioffx)   sh_inp[ty+]

#ifdef __cplusplus
extern "C" {
#endif


#ifdef __cplusplus
}
#endif


#endif

.
